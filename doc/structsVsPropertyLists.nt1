Run structtest?.lisp.  The struct versions are about 17, 50, 100 times
faster than the property list versions!

(structtest5.lisp only contains a structure test, doing a functional
programming version in which an entire new structure is created for
each full rotation.  This is intermediate in time between the regular
imperative structure rotations, and the property list imperative
rotation.)

*That* is the thing to work on to speed up popco.  (It's a big job,
though.)

(Hmm. I wonder whether you can make structs even faster in some
situations by typing the slots.  But they are pretty fast as it is.)

Also, I tried duplicating the defstruct version in clojure using closest
obvious clojure analogue (creating a new object every time I rotate all
of the values).  It takes way, way, way longer than even the functional
version of the structure rotation (which significantly slower than the
imperative version).  More than 150X slower.  wtf.  This is using the
default compilation provided by Leiningen, and with default JVM config.
Well, making Java 64bit and expanding its size didn't help.  It may well
be that there are tricks to make the clojure version faster, but at
first glance, there's simply no comparison.  Seems like a showstopper.
It's slower than property lists.  The clojure version is in
structtest5.clj.

UPDATE 10/17/2013:

I was wrong about Clojure.  First, there are multiple analogues to
defstruct in CL.  Second, the way I was accessing the fields initially
was far from optimal.

With defrecord, accessing using .<field> (what I reported above) 
takes 3 orders of magnitude more than accessing fields using :<field>
Wow.  e.g. doing 1M iterations, we have, in one run:
Common Lisp defstruct: 0.171 secs
Clojure defrecord with .<field>'s: 106.890 seconds
Clojure defrecord with :<fields>'s: .271 seconds
Clojure defstruct (with :<field>'s): 2.893 seconds
Clojure deftype (with .<fields>'s): 45.133 seconds

(I don't think you can use .<field> with defstruct, or :<field> with
deftype.)

So defrecord with :<field> is the fastest, and although it takes 50%
more time relative to CL in this example, that's still in the same
ballpark.  Much faster than the property list access I'm using now.


