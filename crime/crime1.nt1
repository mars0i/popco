crime1.nt1
Summary/discussion of an issue first described in criment6.nts

intended mapping:
    (recruit (prev-criminal-cperson at-risk-cperson) cv-rpa)
    (infect (prev-infected-elt at-risk-elt) v-ipa)
the latter is also lightly mapping:
    (victimize (prev-criminal-cperson cperson) cb-vpp)

intended mapping:
    (victimize (prev-criminal-cperson cperson) cb-vpp)
    (attack (beast bperson) b-abp)
the latter is also lightly mapping:
    (recruit (prev-criminal-cperson at-risk-cperson) cv-rpa)


SUMMARY:

numbers are weights from prevent=prevent:

                               .2
victimize      cb-vpp	<- intended -> b-abp            attack
               	  A                      A
        	  |                      |
           .3 unintended             unintended  .3
        	  |                      |
        	  V                      V
infect  	v-ipa	<- intended -> cb-rpa           recruit
        	              .5


There are appropriate negative links in the acme network, but they
don't overcome the positive inputs to the undesirable map nodes.
The biggest input seems to be prevent=prevent, which occurs
because all four propositions occur as arguments of H-O propns
using PREVENT.

In each case, the proposition appears as the first arg of a cause propn,
with the second arg being a unary propn (there are some lacks of
parallel beyond that point wrt to the predicate in the unary propn).

In each case, the proposition appears as the second arg of at
least one prevent propn, where the first arg is a unary propn.
The virus-like propns differ from the beast-like propns in that 
beastlike have only one prevent propn, whereas the viruslike have three.

So there really is a lot of affinity of the inappropriately mapped
propns at the level of structure.  Despite their semantic
difference.


POSSIBLE RESPONSES:

1. Do nothing.  There is a similarity, and this captures it.
But: should there be this much of an effect?  seems not.

2. Adding the pairs of commented out propns in beast propns and beastly-crime
propns doesn't make a significant difference:
    ;(kill (prev-criminal) cb-kp)
    ;(prevent (cb-kp cb-vpp) cb-kb->-vpp)
    ;(kill (beast) b-kb)
    ;(prevent (b-kb b-abp) b-kp->-abp)
i.e. DOESN'T HELP

3. Use two different PREVENT predicates.
This is a very artificial kludge.

4. Similar idea, but swap argument order.  e.g. create passive
voice versions of the predicates.

5. Add negative soft iffs.  After all, they really are different.

6. Add negative semantic links between 
        infect, victimize
and between
        attack, recruit
Especially in the latter case, this seems reasonable.
e.g.:
    (similar 'infect 'victimize (* -.5 *ident-weight*))
    (similar 'attack 'recruit   (* -.5 *ident-weight*))
DOING THIS HAS *NO* EFFECT AT ALL.
Well it has an initial effect, but it washes out quickly.
By tick 100, the numbers are identical.  The transition 
happens at tick 61.  If the weights are changed to -1, the
transition to identity occurs at tick 55.

7. Increase the weight of negative propositional links relative to
positive ones.  This ratio was set arbitrarily for the sanday
models.
Well, increasing absolute *propn-inhib-weight* from -.025 to -.05, -.10,
-.2 (i.e. equal to excit weight) did not get rid of the problematic
activations, but did mess up some appropriate activations, sending them
negative.  Nor did changing from -.025 to -.010 .
i.e. DOESN'T HELP

8. Add these:
    (semantic-iff 'cv-ca 'cv-na -1.0) ; at-risk-cperson being infected and being uninfected are inconsistent [-1 too strong?]
    (semantic-iff 'v-ia 'v-na -1.0) ; at-risk-cperson being infected and being uninfected are inconsistent [-1 too strong?]
I don't know why this would help [it didn't], but they make some sense.
i.e. DOESN'T HELP

9. Add additional predicates and propositions that distinguish the
inappropriate pairs.
Just adding these doesn't help:
(PREVENT (CB-CPC CB-HCP) CB-CPC->-HCP) ; snap the transitive pointers
(PREVENT (B-CPB B-HP) B-CPB->-HP) ; snap the transitive pointers

10. I think what I should do is to change the arity of arguments to
PREVENT statements so that the members of intended pairs have the same
arity but not members of unintended pairs.  If this is unnatural, it's
kind of like imposing the passive voice, etc.  Ah, this isn't natural.

11. One thing that does work is to comment out all three of the triplets
of propositions that make usse of the relevant propns in v and cv.  This
leaves precious little of the virus analogy--but it still works!  And
it's kind of artificial, again.  The trick is that there are
beast-prevention propns but not virus-prevention propns.
The opposite strategy works, too, taking out the
capture and prevent propns in b and cb.

12. I tried adding these to b, cb:
    (helps (prev-criminal-cperson) cb-hp)
    (cause (cb-vpp cb-hp) b-vpp->hp) ; criminals benefit from attacking--e.g get money
    (helps (beast) b-hb)
    (cause (b-abp b-hb) b-abp->hb) ; beasts benefit from attacking--e.g get food
These would differentiate virus from beast sensibly.  It doesn't help the problem
ta issue here, but I'm leaving them in since they make sense.

THERE'S A BUG SEMANTIC IFFS ARE GETTING OVERWRITTEN.  OK, in current
code, up until early Nov 2012, semantic-iffs are recorded during
init-pop by create-net.  But create-net is run only by init-pop--never
later.  The invocation of semantic-iffs--i.e. actual creation of the
links--is performed in create-nets--i.e. at initialization--and during
conversation when an utterance causes a new proposition to be acquired.
Semantic iffs never affect the network at any other time.  Which makes
sense as long as semantic iffs create links which are not later created
some other way.  The actual effect on the network is ultimately done by
raw-make-symlink in network.lisp.  This calls make-link, which does add
weight if there's an existing link, rather than clobbering the old link.
So the fact that my semantic-iffs are getting clobbered very quickly
during popco runs suggests the bug is really somewhere else.  The
semantic-iff links are getting clobbered rather than being summed into,
it appears.  If there's summing going on, it shouldn't be necessary to
reinvoke the semantic-iffs after they're initially created (or initially
added to whatever's already created by upate-proposition-net in
create-net).  So maybe it's from the updating of proposition links based
on the map node activations.  Yes.  The problem is that the update is
ultimately done by set-symlink-weight in network.lisp, which doesn't
sum---it just overwrites.  But note that normally, *that's what we
want*.  We *don't* want to sum into whatever the map node determined as
proposition link weight last time.  We just want to set the weight.  But
that means that semantic-iffs get clobbered whenever they parallel
potential mappings.  Hmm.  One solution would be to reapply the semantic-iffs
each time, after this.  But maybe we need to undo them first (!), because
the semantic-iffs will sum.  Well aren't I redoing the perceptual links
each time?  Am I?  Maybe everything about proposition links just
needs to be redone each time.  Drop all the links and remake them.
Oh, wait.  The perceptual links aren't proposition-proposition links.  They're
links to SALIENT.  So don't worry about those.  But what about conversation-generated
links.  Don't lose those.  They're not getting recreated each time right now,
and we'd have to store them to recreate them, because the past conversation
interactions are lost--the existing weight is the only record of them.
Dunno--maybe I'm going to have to go to a dual record of proposition link weights.
So that the map-node generated part can be re-clobbered each time, and the
other influences can be remembered and summed back in.

I'M NOT SURE HOW FAR BACK THIS PROBLEM GOES.  Did it originate from
when I added personal environments?  It doesn't involve environments,
but still maybe that led to the change.  Was it there from the start?
DID IT AFFECT THE SIMULATIONS REPORTED IN the "Moderate Role" MS??
Well, SET-SYMLINK-WEIGHT was added 11/2011, apparently.  So that
WAS DEFINITELY GOING ON IN JULY 2012.  OY.


13. Consider adding a third person to virus and viral-crime.


Note: I think the structural relationships do distinguish the
cases as far as is possible given that I'm not really modeling the
transitivity of infection and recruitment.  The effect of the
distinctions just isn't enough.
